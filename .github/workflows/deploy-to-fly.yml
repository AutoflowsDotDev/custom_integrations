name: Deploy to Fly.io

# This workflow deploys the application to Fly.io
# Secrets are stored using Fly.io's secrets management system
# Application data is stored in a persistent volume
# Logs are handled by Fly.io's built-in logging system

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create Fly.io app if it doesn't exist
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Check if app exists
          if ! flyctl apps list | grep -q "email-triage-workflow-api"; then
            echo "Creating Fly.io app 'email-triage-workflow-api'"
            flyctl apps create email-triage-workflow-api --org personal --yes
          else
            echo "Fly.io app 'email-triage-workflow-api' already exists"
          fi
      
      - name: Set up Fly.io secrets
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Gmail API secrets
          echo '${{ secrets.GOOGLE_CLIENT_SECRET }}' > google_client_secret.json
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > google_credentials.json
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > google_service_account.json
          
          # Set all secrets using Fly.io secrets management
          flyctl secrets set \
            GOOGLE_CLIENT_SECRET="$(cat google_client_secret.json)" \
            GOOGLE_CREDENTIALS="$(cat google_credentials.json)" \
            GOOGLE_SERVICE_ACCOUNT="$(cat google_service_account.json)" \
            GMAIL_LABEL_URGENT='${{ secrets.GMAIL_LABEL_URGENT }}' \
            GOOGLE_CLOUD_PROJECT_ID='${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}' \
            GOOGLE_PUBSUB_TOPIC_ID='${{ secrets.GOOGLE_PUBSUB_TOPIC_ID }}' \
            GOOGLE_PUBSUB_SUBSCRIPTION_ID='${{ secrets.GOOGLE_PUBSUB_SUBSCRIPTION_ID }}' \
            SLACK_BOT_TOKEN='${{ secrets.SLACK_BOT_TOKEN }}' \
            SLACK_CHANNEL_ID='${{ secrets.SLACK_CHANNEL_ID }}' \
            OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            OPENROUTER_API_KEY='${{ secrets.OPENROUTER_API_KEY }}' \
            API_KEY='${{ secrets.API_KEY }}' \
            GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
            GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
            SLACK_CLIENT_ID='${{ secrets.SLACK_CLIENT_ID }}' \
            SLACK_CLIENT_SECRET='${{ secrets.SLACK_CLIENT_SECRET }}' \
            --app email-triage-workflow-api
          
          # Remove temporary files
          rm google_client_secret.json google_credentials.json google_service_account.json
        
      - name: Create Fly.io data volume if it doesn't exist
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Create data volume for persistent storage
          flyctl volumes list --app email-triage-workflow-api | grep -q "email_triage_data" || flyctl volumes create email_triage_data --app email-triage-workflow-api --region iad --size 1 --yes
        
      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only --yes 